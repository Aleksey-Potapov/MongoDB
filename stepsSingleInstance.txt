
1. Intro

Get repository to C:\mongodb\scripts

2. Run MongoDB
Server
Download community edition 4.2 (zip) from off site 
Unpack and add Bin to Paths

Client
Download and install Robo 3T only

Run mongod by command


mkdir C:\mongodb\single\instance
mongod --dbpath C:\mongodb\single\instance

Using the config file
cd C:\mongodb
mkdir C:\mongodb\single\logs
mongod -f singledb/singleShard.conf

3. Create collection

Open Robo 3T
use singledb

db.createCollection("users")

db.users.renameCollection("user")

db.user.insertOne( { name: "Workshop" } )

db.content.insertOne(
   { 
       type:            "Journal",
       title:           "Exploring how and why young people use social networking sites", 
       authors:         ["Gray, L"],
       publicationDate: new Date("2018-04-03"),
       parentName:     "Educational Psychology in Practice",
       volume:          NumberInt(34),
       issue:           NumberInt(2),
       pages:           {start:NumberInt(175), end:NumberInt(194)},
       ids:             {doi: "10.1080/02667363.2018.1425829"},
       publisher:       "Routledge",
       abstracts:        "Upcoming statutory UK government guidance for keeping children safe in education reflects the use of social media, which is one of the most common activities undertaken by young people.",
       createDate:      new Date()
})

From files   
Insert many documents from Journals10
load("C:/MongoDB/scripts/SingleDB/journals-10.txt")


4. Search and Filters

db.content.find( { type: "Journal" 
, publisher : "Routledge"} )

db.content.find({ type: "Journal" 
, publisher : "Routledge"
, parentName: "Educational Psychology in Practice"}).limit(2) 

Greater
db.content.find({ type: "Journal" 
, publisher : "Routledge"
, "pages.start":  {$gte: 454}
}) 


OR
 db.content.find({ type: "Journal" 
, publisher : "Routledge"
, $or : [ {"pages.start":{$gte: 454}} ,{"pages.start": {$lt:10}}]
 }
)  

Take less fields
 db.content.find({parentName: "Educational Psychology in Practice"}
 ,{title: true, _id: false}) 
 

Limit array 
db.content.find ({ },{authors: {$slice : 1}})

Regexp
db.content.find ({abstracts: {$regex:"teacher"}}) 
db.content.find({abstracts:/teacher/i})

Existance
db.content.find ({name: {$exists:true}})
By Type
db.content.find ({issue: {$type:"string"}}) 


4.5 Update existing records!!!
pubdates - preprint, print ,electronics

5 Groups and Aggregation

db.content.distinct("publisher")

db.content.aggregate([
  {
    $group: {
      _id: "$publisher",
      sampleTitle: { $first : "$title" }
    }
  },
  {
    $sort:{ _id : 1 }
  }
])


db.content.aggregate([
  {
    $group: {
      _id:   {"publisher": "$publisher",
               "Parent": "$parentName"},
      sample: { $first : "$title" },
	  count: { $sum: 1 }
    }
  },
  {
    $sort:{ _id : 1 }
  }
])
   
LINQ for IQueryable

6. Indexes
 
 db.getCollection('content').find({title:/teacher/i})
 db.getCollection('content').find({title:/teacher/i}).explain()
 
 db.content.createIndex({"title" : 1}, {"unique" : false}) 
  
db.getCollection('content').find({title:/teacher/i}).explain()
  
   
db.content.getIndexes()
 db.users.dropIndex("titile_1")
  
 Text index, Text Langueage  
  db.content.createIndex({"abstracts" : "text"} )
  
 db.content.find( { $text: { $search: "adults or and teacherâ€™s" } } ).explain()
 
 Exact Phrase in quotas
 
 db.content.find( { $text: { $search: "\"an active listening\"" } } ) 
db.content.find( { $text: { $search: "an active listening" } } ) 
 
 
 Term Exclusion
 
 db.content.find( { $text: { $search: "adult learn -pain" } } )
 
 
 Sorting
 To sort the results in order of relevance score, you must explicitly project the $meta textScore field and sort on it:


db.content.find(
   { $text: { $search: "article learn" } },
   { score: { $meta: "textScore" } }
).sort( { score: { $meta: "textScore" } } )


Take only best match
db.content.aggregate(
   [
     { $match: { $text: { $search: "article learn" } } },
     { $project: { title: 1, _id: 0, score: { $meta: "textScore" } } },
     { $match: { score: { $gt: 1.0 } } }
   ]
)

Check the indexes usage.
db.content.aggregate( [ { $indexStats: { } } ] )

 
 
Capped Collections
 db.createCollection("logs", {capped:true, size:9500, max: 150})
 
 
for (var i = 1; i <= 1000; ++i) {
  db.logs.insert({ 
      creationDate: new Date(),
      uid: i
  });
}



7. Map/Reduce

https://docs.mongodb.com/manual/tutorial/perform-incremental-map-reduce/

 fn = function() { return this.name=="Tom"; }
 db.users.find(fn)

function sqrt(n) { return n*n; }
  sqrt(5)
  
  
Map/Reduce

db.usersessions.insertMany([
   { userid: "a", start: ISODate('2020-03-03 14:17:00'), length: 95 },
   { userid: "b", start: ISODate('2020-03-03 14:23:00'), length: 110 },
   { userid: "c", start: ISODate('2020-03-03 15:02:00'), length: 120 },
   { userid: "d", start: ISODate('2020-03-03 16:45:00'), length: 45 },
   { userid: "a", start: ISODate('2020-03-04 11:05:00'), length: 105 },
   { userid: "b", start: ISODate('2020-03-04 13:14:00'), length: 120 },
   { userid: "c", start: ISODate('2020-03-04 17:00:00'), length: 130 },
   { userid: "d", start: ISODate('2020-03-04 15:37:00'), length: 65 }
])

#Map
var mapFunction = function() {
    var key = this.userid;
    var value = { total_time: this.length, count: 1, avg_time: 0 };
    emit( key, value );
};

#Reduce

var reduceFunction = function(key, values) {
   var reducedObject = { total_time: 0, count:0, avg_time:0 };
   values.forEach(function(value) {
      reducedObject.total_time += value.total_time;
      reducedObject.count += value.count;
   });
   return reducedObject;
};

var finalizeFunction = function(key, reducedValue) {
   if (reducedValue.count > 0)
      reducedValue.avg_time = reducedValue.total_time / reducedValue.count;
   return reducedValue;
};

db.usersessions.mapReduce(
   mapFunction,
   reduceFunction,
   {
     out: "session_stats",
     finalize: finalizeFunction
   }
)

db.session_stats.find().sort( { _id: 1 } )

db.usersessions.insertMany([
   { userid: "a", ts: ISODate('2020-03-05 14:17:00'), length: 130 },
   { userid: "b", ts: ISODate('2020-03-05 14:23:00'), length: 40 },
   { userid: "c", ts: ISODate('2020-03-05 15:02:00'), length: 110 },
   { userid: "d", ts: ISODate('2020-03-05 16:45:00'), length: 100 }
])

db.usersessions.mapReduce(
   mapFunction,
   reduceFunction,
   {
     query: { ts: { $gte: ISODate('2020-03-05 00:00:00') } },
     out: { reduce: "session_stats" },
     finalize: finalizeFunction
   }
);



db.usersessions.aggregate([
   { $match: { ts: { $gte: ISODate('2020-03-05 00:00:00') } } },
   { $group: { _id: "$userid", total_time: { $sum: "$length" }, count: { $sum: 1 }, avg_time: { $avg: "$length" } } },
   { $project: { value: { total_time: "$total_time", count: "$count", avg_time: "$avg_time" } } },
   { $merge: {
      into: "session_stats_agg",
      whenMatched: [ { $set: {
         "value.total_time": { $add: [ "$value.total_time", "$$new.value.total_time" ] },
         "value.count": { $add: [ "$value.count", "$$new.value.count" ] },
         "value.avg_time": { $divide: [ { $add: [ "$value.total_time", "$$new.value.total_time" ] },  { $add: [ "$value.count", "$$new.value.count" ] } ] }
      } } ],
      whenNotMatched: "insert"
   }}
])



 
99. Utils

Check perfomance 
mongostat --port 27017

mongorestore --drop --port 27017 dump/
mongodump --port 27017 --db single --collection content


mongoexport --port 27017 --db single --collection content -o content.json
mongoimport --port 27017 content.json

 

