https://docs.mongodb.com/v4.2/mongo/
https://docs.mongodb.com/v4.2/tutorial/install-mongodb-on-windows/
https://docs.mongodb.com/v4.2/tutorial/deploy-shard-cluster/
https://docs.mongodb.com/v4.2/crud/
https://docs.mongodb.com/v4.2/reference/sql-aggregation-comparison/
https://docs.mongodb.com/v4.2/core/ranged-sharding/
https://docs.mongodb.com/v4.2/core/bulk-write-operations/
https://docs.mongodb.com/v4.2/core/transactions/
https://docs.mongodb.com/v4.2/indexes/

About fields
Types
Restrictions


Create or insert operations add new documents to a collection. 
If the collection does not currently exist, insert operations will create the collection.

mongod --port 27017 --dbpath c:\mongodb\single\singledb

use cruddb

------------------------------------------INSERT

db.inventory.insertOne( {} )


db.inventory.insertMany( [ {}, {} ] )

------------------------------------------SEARCH/ FILTER

db.content.find( { type: "Journal"  }) 

--------------Only selected fields

db.content.find( { type: "Journal"  } ,
 {title: true, _id: false})


--------------AND
db.content.find( { type: "Journal" 
, publisher : "Routledge"} )


--------------OR

db.content.find( { type: "Journal" ,
    $or: [ { volume:   36  }, {publicationDate: { $gt:  ISODate("2018-04-03T00:00:00.000Z")}}]  
    } )

--------------OR AND Regular exp

db.content.find( { type: "Journal" ,
   title: /.* young.*p.+s$/  
    } )
	
 db.content.find({title:/^B\w+/i})
 
 
--------------Nested

db.content.find( { type: "Journal" ,
       title: /.* young.*p.+s$/ ,
        "pages.start" :{ $gt: 170 }
    } )
   

.sort({publicationDate: 1}).limit(2)


.sort({title:1}).limit(1)

db.content.find().sort({title:-1}).limit(1) 


.count({type: "Journal"})

.distinct("type")


db.content.find ({parentName: {$exists:true}})

------------------------------------------ UPDATE


https://metanit.com/nosql/mongodb/2.9.php

db.collection.updateOne(<filter>, <update>, <options>)
db.collection.updateMany(<filter>, <update>, <options>)
db.collection.replaceOne(<filter>, <update>, <options>)


db.inventory.updateMany(
   { publisher: "Routledge"},
   {
     $set: { publisher: "Routledge-2" },
     $currentDate: { lastModified: true }
   }
)

If updateOne(), updateMany(), or replaceOne() includes upsert : true and no documents match the specified filter, 
then the operation creates a new document and inserts it. 
If there are matching documents, then the operation modifies or replaces the matching document or documents.

db.students3.updateMany(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, modified: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ]
)


db.temperatures.updateMany( { },
  [
    { $addFields: { "tempsF": {
          $map: {
             input: "$tempsC",
             as: "celsius",
             in: { $add: [ { $multiply: ["$$celsius", 9/5 ] }, 32 ] }
          }
    } } }
  ]
)


-------------------------------BULK

var bulk = db.users.initializeOrderedBulkOp();
bulk.insert( { user: "abc123", status: "A", points: 0 } );
bulk.insert( { user: "ijk123", status: "A", points: 0 } );
bulk.insert( { user: "mop123", status: "P", points: 0 } );
bulk.find( { status: "D" } ).remove();
bulk.find( { status: "P" } ).update( { $set: { comment: "Pending" } } );
bulk.execute();

------------------------------------------ DELETE / DROP

 

db.inventory.deleteMany({ status : "A" })
db.inventory.deleteOne( { status: "D" } 

db.users.deleteMany({})

db.users.drop()

db.dropDatabase()
------------------------------------------ AGGREGATION

https://docs.mongodb.com/v4.2/aggregation/


MongoDB provides three ways to perform aggregation:
 the aggregation pipeline,
 the map-reduce function,
 and single purpose aggregation methods.


db.content.aggregate([
   { $match: { type: "Journal" } },
   { $group: { _id: "$cust_id", total: { $sum: 1} } }
])


Group by null
The following aggregation operation specifies a group _id of null, calculating the total sale amount, average quantity, and count of all documents in the collection.

db.sales.aggregate([
  {
    $group : {
       _id : null,
       totalSaleAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } },
       averageQuantity: { $avg: "$quantity" },
       count: { $sum: 1 }
    }
  }
 ])
 
   db.content.aggregate( [ 
   { $match: { type: "Journal" } },
   { $unwind : "$authors" } ,
  {  $group: { _id: "$authors", total: { $sum: 1} }},
 { $match: { total:  {$gt:1}} }, 
    ] )
	
------------------------------------------MAP/REDUCE
-------------------MATCH

-------------------MAP

-------------------REDUCE

-------------------FINALIZE





------------------------------------------INDEXES
[1]	MongoDB indexes use a B-tree data structure.


https://metanit.com/nosql/mongodb/2.12.php

db.collection.getIndexes() 

db.content.createIndex( { type: -1 } 

db.products.createIndex(
  { item: 1, quantity: -1 } ,
  { name: "query for inventory" }
)



db.content.createIndex( { abstracts: "text" } )