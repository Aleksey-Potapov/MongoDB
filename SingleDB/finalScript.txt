Final Steps


1. Intro
About NoSQL
About MongoDB
Data formta
CrossPlatform
Documents instead rows
Ket _is
Collection
Replications

SImplicity
Max 16Mb

GridFS technology files with metadata and chunks. files are splilted on 256 kb


 

2. Run MongoDB

Download from site communit edition
portable
add to enviromnts varalbes Path

2 Ways Run mongod
By COmmand
 
mkdir C:\mongodb\single\db
mongod --dbpath C:\mongodb\single\db

Using config file
cd C:\Mongodb
mkdir C:\mongodb\single\logs
mongod -f single/singleShard.conf

Path where you run mongodb matters. see paths in the config file. They are Relative

3. Create collection

Open Robomongo
use singledb
db.createCollection("content")

Create collection
Подколлекции  db.users.accounts
db.users.renameCollection("новое_название")

Insert DOcument simple

db.content.insertOne( { name: "Workshop" } )

Add detailes

Tell about 15 Data types

ABout $id and ObjectId


 document=({"name": "Bill", "age": 32, languages: ["english", "french"]})
  db.users.insertOne(document)

db.content.insertOne(
   { 
       type:            "Journal",
       title:           "Exploring how and why young people use social networking sites", 
       authors:         ["Gray, L"],
       publicationDate: new Date("2018-04-03"),
       parentName:     "Educational Psychology in Practice",
       volume:          NumberInt(34),
       issue:           NumberInt(2),
       pages:           {start:NumberInt(175), end:NumberInt(194)},
       ids:             {doi: "10.1080/02667363.2018.1425829"},
       publisher:       "Routledge",
       abstracts:        "Upcoming statutory UK government guidance for keeping children safe in education reflects the use of social media, which is one of the most common activities undertaken by young people.",
       createDate:      new Date()
   })

From file
load("D:/users.js")

   
Insert many documents from Journals10

load("C:/MongoDB/scripts/SingleDB/journals-10.txt")


4. Search and Filtert

db.content.find({ type: "Journal" 
, publisher : "Routledge"
,parentName: "Educational Psychology in Practice"}).limit(2) 

db.content.find( { type: "Journal" 
, publisher : "Routledge"} )

Groups
 
db.content.distinct("publisher")



 db.content.find({parentName: "Educational Psychology in Practice"}
 ,{title: true, _id: false}).limit(2) 

 

db.users.find ({name: "Tom"}, {languages: {$slice : 1}}) взять один из массива языков

 
var cursor = db.users.find() 
 cursor.sort({name:1}).limit(3).skip(0).forEach(function(obj){
 print(obj.name);
 })

by ine field
ANd ,OR
 db.users.find ({$or : [{name: "Tom"}, {age: {$gte:30}}]})
 db.users.find ({$and : [{name: "Tom"}, {age: 32}]})
options



db.users.find ({age: {$gt : 30, $lt: 50}})

db.users.find ({name: {$regex:"b"}}) 
db.content.find({abstracts:/adult/i})
  
db.content.find ({name: {$exists:true}})


db.content.find ({issue: {$type:"string"}}) 


Manual  References
Формальная схема
{ "$ref" : название_коллекции, "$id": значение [, "$db" : название_бд ]}

db.companies.insertOne({"_id" : "microsoft", year: 1974})
db.users.insertOne({name: "Tom", age: 28, company: "microsoft"})
user = db.users.findOne()
db.companies.findOne({_id: user.company})


 
Автоматическое связывание
google = db.companies.insertOne({name : "google", year: 1998})
sam = ({name: "Sam", age: 25, company: { "$ref" : "companies", "$id" : google.insertedId}})
db.users.insertOne(sam)
 
db.companies.findOne({_id: sam.company.$id})


"$ref"
"$id" 
$ - reserved


5. Indexes
 
 db.getCollection('content').find({title:/adult/i}).explain()
 db.content.createIndex({"title" : 1}, {"unique" : false}) 
  db.getCollection('content').find({title:/adult/i}).explain()
  
   
db.content.getIndexes()
 db.users.dropIndex("titile_1")
 
 Add info about indexes from off site
 Text index, Text Langueage  
  db.content.createIndex({"abstracts" : "text"} )
db.content.find( { $text: { $search: "adult or child" } } ).explain()
 
 Exact Phrase ini quotas
 
 db.stores.find( { $text: { $search: "\"coffee shop\"" } } )
 
 Term Exclusion
 
 db.stores.find( { $text: { $search: "java shop -coffee" } } )
 
 Sorting
 To sort the results in order of relevance score, you must explicitly project the $meta textScore field and sort on it:

db.stores.find(
   { $text: { $search: "java coffee shop" } },
   { score: { $meta: "textScore" } }
).sort( { score: { $meta: "textScore" } } )


Aggregation

db.articles.aggregate(
   [
     { $match: { $text: { $search: "cake" } } },
     { $group: { _id: null, views: { $sum: "$views" } } }
   ]
)
 
 
 db.articles.aggregate(
   [
     { $match: { $text: { $search: "cake tea" } } },
     { $project: { title: 1, _id: 0, score: { $meta: "textScore" } } },
     { $match: { score: { $gt: 1.0 } } }
   ]
)


 
Capped Collections
 db.createCollection("logs", {capped:true, size:9500, max: 150})
 
 

6. Map/Reduce


 fn = function() { return this.name=="Tom"; }
 db.users.find(fn)

function sqrt(n) { return n*n; }
  sqrt(5)
  
  
Map/Reduce

Reduce


Finalize

80. What is Replications
Replica Set

Reads Writes
COncerns


90. Sharding






99. Utils

Check perfomance 
mongostat --port 27017

mongorestore --drop --port 27017 dump/
mongodump --port 27017 --db single --collection content


mongoexport --port 27017 --db single --collection content -o content.json
mongoimport --port 27017 content.json


Show file content and compare

